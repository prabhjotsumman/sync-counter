{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/prabhjot/shared-counter-app/src/lib/counters.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\n\nexport interface Counter {\n  id: string;\n  name: string;\n  value: number;\n  lastUpdated?: number;\n}\n\nconst DATA_FILE = path.join(process.cwd(), 'data', 'counters.json');\n\n// Ensure data directory exists\nasync function ensureDataDir() {\n  const dataDir = path.dirname(DATA_FILE);\n  try {\n    await fs.access(dataDir);\n  } catch {\n    await fs.mkdir(dataDir, { recursive: true });\n  }\n}\n\n// Initialize default counters if file doesn't exist\nasync function initializeCounters(): Promise<Counter[]> {\n  const now = Date.now();\n  const defaultCounters: Counter[] = [\n    { id: 'counter-1', name: 'Counter 1', value: 0, lastUpdated: now },\n    { id: 'counter-2', name: 'Counter 2', value: 0, lastUpdated: now },\n    { id: 'counter-3', name: 'Counter 3', value: 0, lastUpdated: now },\n  ];\n  \n  await ensureDataDir();\n  await fs.writeFile(DATA_FILE, JSON.stringify(defaultCounters, null, 2));\n  return defaultCounters;\n}\n\n// Read counters from file\nexport async function getCounters(): Promise<Counter[]> {\n  try {\n    await ensureDataDir();\n    const data = await fs.readFile(DATA_FILE, 'utf-8');\n    return JSON.parse(data);\n  } catch {\n    // If file doesn't exist, initialize with default counters\n    return initializeCounters();\n  }\n}\n\n// Write counters to file\nasync function saveCounters(counters: Counter[]): Promise<void> {\n  await ensureDataDir();\n  await fs.writeFile(DATA_FILE, JSON.stringify(counters, null, 2));\n}\n\n// Update a specific counter\nexport async function updateCounter(id: string, delta: number): Promise<Counter | null> {\n  const counters = await getCounters();\n  const counterIndex = counters.findIndex(c => c.id === id);\n  \n  if (counterIndex === -1) {\n    return null;\n  }\n  \n  const now = Date.now();\n  counters[counterIndex].value += delta;\n  counters[counterIndex].lastUpdated = now;\n  await saveCounters(counters);\n  \n  return counters[counterIndex];\n}\n\n// Get a specific counter\nexport async function getCounter(id: string): Promise<Counter | null> {\n  const counters = await getCounters();\n  return counters.find(c => c.id === id) || null;\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AASA,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAEnD,+BAA+B;AAC/B,eAAe;IACb,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC7B,IAAI;QACF,MAAM,6FAAA,CAAA,WAAE,CAAC,MAAM,CAAC;IAClB,EAAE,OAAM;QACN,MAAM,6FAAA,CAAA,WAAE,CAAC,KAAK,CAAC,SAAS;YAAE,WAAW;QAAK;IAC5C;AACF;AAEA,oDAAoD;AACpD,eAAe;IACb,MAAM,MAAM,KAAK,GAAG;IACpB,MAAM,kBAA6B;QACjC;YAAE,IAAI;YAAa,MAAM;YAAa,OAAO;YAAG,aAAa;QAAI;QACjE;YAAE,IAAI;YAAa,MAAM;YAAa,OAAO;YAAG,aAAa;QAAI;QACjE;YAAE,IAAI;YAAa,MAAM;YAAa,OAAO;YAAG,aAAa;QAAI;KAClE;IAED,MAAM;IACN,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,iBAAiB,MAAM;IACpE,OAAO;AACT;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QACN,MAAM,OAAO,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,WAAW;QAC1C,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAM;QACN,0DAA0D;QAC1D,OAAO;IACT;AACF;AAEA,yBAAyB;AACzB,eAAe,aAAa,QAAmB;IAC7C,MAAM;IACN,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,MAAM;AAC/D;AAGO,eAAe,cAAc,EAAU,EAAE,KAAa;IAC3D,MAAM,WAAW,MAAM;IACvB,MAAM,eAAe,SAAS,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAEtD,IAAI,iBAAiB,CAAC,GAAG;QACvB,OAAO;IACT;IAEA,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,CAAC,aAAa,CAAC,KAAK,IAAI;IAChC,QAAQ,CAAC,aAAa,CAAC,WAAW,GAAG;IACrC,MAAM,aAAa;IAEnB,OAAO,QAAQ,CAAC,aAAa;AAC/B;AAGO,eAAe,WAAW,EAAU;IACzC,MAAM,WAAW,MAAM;IACvB,OAAO,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO;AAC5C","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/prabhjot/shared-counter-app/src/app/api/sync/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getCounters } from '@/lib/counters';\n\n// Store connected clients\nconst clients = new Set<ReadableStreamDefaultController>();\n\n// Broadcast function to send updates to all clients\nexport function broadcastUpdate(data: any) {\n  const message = `data: ${JSON.stringify(data)}\\n\\n`;\n  clients.forEach(client => {\n    try {\n      client.enqueue(new TextEncoder().encode(message));\n    } catch (error) {\n      console.error('Error broadcasting to client:', error);\n    }\n  });\n}\n\nexport async function GET(request: NextRequest) {\n  const stream = new ReadableStream({\n    start(controller) {\n      // Add client to the set\n      clients.add(controller);\n      \n      // Send initial data\n      getCounters().then(counters => {\n        const message = `data: ${JSON.stringify({\n          type: 'initial',\n          counters,\n          timestamp: Date.now()\n        })}\\n\\n`;\n        controller.enqueue(new TextEncoder().encode(message));\n      });\n\n      // Handle client disconnect\n      request.signal.addEventListener('abort', () => {\n        clients.delete(controller);\n        controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    }\n  });\n}\n"],"names":[],"mappings":";;;;AACA;;AAEA,0BAA0B;AAC1B,MAAM,UAAU,IAAI;AAGb,SAAS,gBAAgB,IAAS;IACvC,MAAM,UAAU,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC,MAAM,IAAI,CAAC;IACnD,QAAQ,OAAO,CAAC,CAAA;QACd,IAAI;YACF,OAAO,OAAO,CAAC,IAAI,cAAc,MAAM,CAAC;QAC1C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;QACjD;IACF;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,SAAS,IAAI,eAAe;QAChC,OAAM,UAAU;YACd,wBAAwB;YACxB,QAAQ,GAAG,CAAC;YAEZ,oBAAoB;YACpB,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD,IAAI,IAAI,CAAC,CAAA;gBACjB,MAAM,UAAU,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;oBACtC,MAAM;oBACN;oBACA,WAAW,KAAK,GAAG;gBACrB,GAAG,IAAI,CAAC;gBACR,WAAW,OAAO,CAAC,IAAI,cAAc,MAAM,CAAC;YAC9C;YAEA,2BAA2B;YAC3B,QAAQ,MAAM,CAAC,gBAAgB,CAAC,SAAS;gBACvC,QAAQ,MAAM,CAAC;gBACf,WAAW,KAAK;YAClB;QACF;IACF;IAEA,OAAO,IAAI,SAAS,QAAQ;QAC1B,SAAS;YACP,gBAAgB;YAChB,iBAAiB;YACjB,cAAc;YACd,+BAA+B;YAC/B,gCAAgC;QAClC;IACF;AACF","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///Users/prabhjot/shared-counter-app/src/app/api/counters/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getCounters } from '@/lib/counters';\nimport { broadcastUpdate } from '../sync/route';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\nconst DATA_FILE = path.join(process.cwd(), 'data', 'counters.json');\n\nexport async function GET() {\n  try {\n    const counters = await getCounters();\n    const response = {\n      counters,\n      timestamp: Date.now()\n    };\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error fetching counters:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch counters' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { name, value = 0 } = body;\n\n    if (!name || typeof name !== 'string') {\n      return NextResponse.json(\n        { error: 'Counter name is required' },\n        { status: 400 }\n      );\n    }\n\n    const counters = await getCounters();\n    const newCounter = {\n      id: `counter-${Date.now()}`,\n      name: name.trim(),\n      value: parseInt(value) || 0,\n      lastUpdated: Date.now()\n    };\n\n    counters.push(newCounter);\n    \n    // Save to file\n    await fs.writeFile(DATA_FILE, JSON.stringify(counters, null, 2));\n\n    const response = {\n      counter: newCounter,\n      timestamp: Date.now()\n    };\n    \n    // Broadcast the new counter to all connected clients\n    broadcastUpdate({\n      type: 'counter_created',\n      counter: newCounter,\n      timestamp: Date.now()\n    });\n    \n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error('Error creating counter:', error);\n    return NextResponse.json(\n      { error: 'Failed to create counter' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAE5C,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD;QACjC,MAAM,WAAW;YACf;YACA,WAAW,KAAK,GAAG;QACrB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAG;QAE5B,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD;QACjC,MAAM,aAAa;YACjB,IAAI,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI;YAC3B,MAAM,KAAK,IAAI;YACf,OAAO,SAAS,UAAU;YAC1B,aAAa,KAAK,GAAG;QACvB;QAEA,SAAS,IAAI,CAAC;QAEd,eAAe;QACf,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,MAAM;QAE7D,MAAM,WAAW;YACf,SAAS;YACT,WAAW,KAAK,GAAG;QACrB;QAEA,qDAAqD;QACrD,CAAA,GAAA,oIAAA,CAAA,kBAAe,AAAD,EAAE;YACd,MAAM;YACN,SAAS;YACT,WAAW,KAAK,GAAG;QACrB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}